{"version":3,"sources":["svg/heart.svg","svg/blob.svg","svg/star.svg","svg/butterfly.svg","jsx/ColorSliders.jsx","jsx/ParameterSliders.jsx","jsx/ImageSelect.jsx","js/draw.js","jsx/App.jsx","index.js"],"names":["module","exports","ColorSliders","props","color","setColor","className","hue","type","min","max","value","onChange","e","target","step","saturation","lightness","ParameterSliders","params","setParams","canvas_width","parseInt","canvas_height","shape_scale","parseFloat","x_gap","y_gap","coverage","random_x_offset","random_y_offset","rotation_lower","newValue","rotation_upper","ImageSelect","loadImageToState","src","Blob","onClick","Heart","Star","Butterfly","loadImage","imgURL","a","Promise","resolve","reject","img","Image","onload","onerror","getContext","document","getElementById","drawCanvasBackground","ctx","fillStyle","fillRect","calculateRotation","Math","random","calculateXPosition","width","i","perRow","calculateYPosition","height","floor","drawAllShapes","round","perColumn","calculatePatternInfo","x","y","rotation","drawSvg","translate","rotate","degreesToRadians","drawImage","degrees","PI","App","useState","setImg","useEffect","drawPattern","svg","loadedImage","id","ReactDOM","render"],"mappings":"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","file":"static/js/main.0cd2acbe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/heart.ec65b7a0.svg\";","module.exports = __webpack_public_path__ + \"static/media/blob.8a42bc92.svg\";","module.exports = __webpack_public_path__ + \"static/media/star.ac0e8423.svg\";","module.exports = __webpack_public_path__ + \"static/media/butterfly.27d96e32.svg\";","import React from \"react\";\n\nconst ColorSliders = (props) => {\n  const { color, setColor } = props;\n  return (\n    <div className=\"slider-container\">\n      <span>Hue: {color.hue}</span>\n      <input\n        type=\"range\"\n        min=\"0\"\n        max=\"359\"\n        value={color.hue}\n        onChange={(e) => setColor({ ...color, hue: e.target.value })}\n        step=\"1\"\n      />\n      <span>Saturation: {color.saturation}</span>\n      <input\n        type=\"range\"\n        min=\"0\"\n        max=\"100\"\n        value={color.saturation}\n        onChange={(e) => setColor({ ...color, saturation: e.target.value })}\n        step=\"1\"\n      />\n      <span>Lightness: {color.lightness}</span>\n      <input\n        type=\"range\"\n        min=\"0\"\n        max=\"90\"\n        value={color.lightness}\n        onChange={(e) => setColor({ ...color, lightness: e.target.value })}\n        step=\"1\"\n      />\n    </div>\n  );\n};\n\nexport default ColorSliders;\n","import React from \"react\";\n\nconst ParameterSliders = (props) => {\n  const { params, setParams } = props;\n  return (\n    <div className=\"slider-container\">\n      <span className=\"canvas-slider\">Canvas Width: {params.canvas_width}</span>\n      <input\n        className=\"canvas-slider\"\n        type=\"range\"\n        min=\"100\"\n        max=\"950\"\n        value={params.canvas_width}\n        onChange={(e) =>\n          setParams({ ...params, canvas_width: parseInt(e.target.value) })\n        }\n      />\n      <span className=\"canvas-slider\">\n        Canvas Height: {params.canvas_height}\n      </span>\n      <input\n        className=\"canvas-slider\"\n        type=\"range\"\n        min=\"100\"\n        max=\"950\"\n        value={params.canvas_height}\n        onChange={(e) =>\n          setParams({ ...params, canvas_height: parseInt(e.target.value) })\n        }\n      />\n      <span>Shape Scale: {params.shape_scale}</span>\n      <input\n        type=\"range\"\n        step=\"0.01\"\n        min=\"1\"\n        max=\"10\"\n        value={params.shape_scale}\n        className=\"slider\"\n        onChange={(e) =>\n          setParams({ ...params, shape_scale: parseFloat(e.target.value) })\n        }\n      />\n      <span>X Gap: {params.x_gap}</span>\n      <input\n        type=\"range\"\n        step=\"0.01\"\n        min=\"1\"\n        max=\"3\"\n        value={params.x_gap}\n        className=\"slider\"\n        onChange={(e) =>\n          setParams({ ...params, x_gap: parseFloat(e.target.value) })\n        }\n      />\n      <span>Y Gap: {params.y_gap}</span>\n      <input\n        type=\"range\"\n        step=\"0.01\"\n        min=\"1\"\n        max=\"3\"\n        value={params.y_gap}\n        className=\"slider\"\n        onChange={(e) =>\n          setParams({ ...params, y_gap: parseFloat(e.target.value) })\n        }\n      />\n      <span>Coverage: {params.coverage}</span>\n      <input\n        type=\"range\"\n        step=\"1\"\n        min=\"0\"\n        max=\"100\"\n        value={params.coverage}\n        className=\"slider\"\n        onChange={(e) =>\n          setParams({ ...params, coverage: parseInt(e.target.value) })\n        }\n      />\n      <span>Random X Offset: {params.random_x_offset}</span>\n      <input\n        type=\"range\"\n        step=\"1\"\n        min=\"-100\"\n        max=\"100\"\n        value={params.random_x_offset}\n        className=\"slider\"\n        onChange={(e) =>\n          setParams({ ...params, random_x_offset: parseInt(e.target.value) })\n        }\n      />\n      <span>Random Y Offset: {params.random_y_offset}</span>\n      <input\n        type=\"range\"\n        step=\"1\"\n        min=\"-100\"\n        max=\"100\"\n        value={params.random_y_offset}\n        className=\"slider\"\n        onChange={(e) =>\n          setParams({ ...params, random_y_offset: parseInt(e.target.value) })\n        }\n      />\n      <span>Rotation Lower Limit: {params.rotation_lower}</span>\n      <input\n        type=\"range\"\n        step=\"1\"\n        min=\"-180\"\n        max=\"180\"\n        value={params.rotation_lower}\n        className=\"slider\"\n        onChange={(e) => {\n          const newValue = parseInt(e.target.value);\n          if (newValue > params.rotation_upper)\n            setParams({\n              ...params,\n              rotation_lower: newValue,\n              rotation_upper: newValue,\n            });\n          else setParams({ ...params, rotation_lower: newValue });\n        }}\n      />\n      <span>Rotation Upper Limit: {params.rotation_upper}</span>\n      <input\n        type=\"range\"\n        step=\"1\"\n        min=\"-180\"\n        max=\"180\"\n        value={params.rotation_upper}\n        className=\"slider\"\n        onChange={(e) => {\n          const newValue = parseInt(e.target.value);\n          if (newValue < params.rotation_lower)\n            setParams({\n              ...params,\n              rotation_lower: newValue,\n              rotation_upper: newValue,\n            });\n          else setParams({ ...params, rotation_upper: newValue });\n        }}\n      />\n    </div>\n  );\n};\n\nexport default ParameterSliders;\n","import React from \"react\";\n\nimport Blob from \"svg/blob.svg\";\nimport Heart from \"svg/heart.svg\";\nimport Star from \"svg/star.svg\";\nimport Butterfly from \"svg/butterfly.svg\";\n\nconst ImageSelect = (props) => {\n  const { loadImageToState } = props;\n  return (\n    <div className=\"svg-button-container\">\n      <img\n        className=\"svg-button\"\n        src={Blob}\n        onClick={() => loadImageToState(Blob)}\n      />\n      <img\n        className=\"svg-button\"\n        src={Heart}\n        onClick={() => loadImageToState(Heart)}\n      />\n      <img\n        className=\"svg-button\"\n        src={Star}\n        onClick={() => loadImageToState(Star)}\n      />\n      <img\n        className=\"svg-button\"\n        src={Butterfly}\n        onClick={() => loadImageToState(Butterfly)}\n      />\n    </div>\n  );\n};\n\nexport default ImageSelect;\n","export const loadImage = async (imgURL) => {\n  return new Promise((resolve, reject) => {\n    let img = new Image();\n    img.onload = () => resolve(img);\n    img.onerror = reject;\n    img.src = imgURL;\n  });\n};\n\nexport const drawPattern = (img, color, params) => {\n  drawCanvasBackground(color, params);\n  drawAllShapes(img, params);\n};\n\nconst getContext = () => document.getElementById(\"myCanvas\").getContext(\"2d\");\n\nconst drawCanvasBackground = (color, params) => {\n  const { hue, saturation, lightness } = color;\n  const { canvas_width, canvas_height } = params;\n  const ctx = getContext();\n  ctx.fillStyle = `hsl(${hue},${saturation}%,${lightness}%)`;\n  ctx.fillRect(0, 0, canvas_width, canvas_height);\n};\n\nconst calculatePatternInfo = (img, params) => {\n  const { shape_scale, canvas_width, canvas_height } = params;\n  const width = img.width / shape_scale;\n  const height = img.height / shape_scale;\n  const perRow = Math.round(canvas_width / width);\n  const perColumn = Math.round(canvas_height / height);\n  return { width, height, perRow, perColumn };\n};\n\nconst calculateRotation = (params) => {\n  const { rotation_lower, rotation_upper } = params;\n  return (\n    (Math.random() - 0.5) * (rotation_upper - rotation_lower) +\n    (rotation_upper + rotation_lower) / 2\n  );\n};\n\nconst calculateXPosition = (width, i, perRow, params) => {\n  const { x_gap, random_x_offset } = params;\n  return (\n    (i % perRow) * width * x_gap + width / 2 + random_x_offset * Math.random()\n  );\n};\n\nconst calculateYPosition = (height, i, perRow, params) => {\n  const { y_gap, random_y_offset } = params;\n  return (\n    Math.floor(i / perRow) * height * y_gap +\n    height / 2 +\n    random_y_offset * Math.random()\n  );\n};\n\nconst drawAllShapes = (img, params) => {\n  const { coverage } = params;\n  const { width, height, perRow, perColumn } = calculatePatternInfo(\n    img,\n    params\n  );\n  for (let i = 0; i < perRow * perColumn; i++) {\n    if (Math.random() * 100 < coverage) {\n      const x = calculateXPosition(width, i, perRow, params);\n      const y = calculateYPosition(height, i, perRow, params);\n      const rotation = calculateRotation(params);\n      drawSvg(img, x, y, rotation, width, height);\n    }\n  }\n};\n\nconst drawSvg = (img, x, y, rotation, width, height) => {\n  const ctx = getContext();\n  ctx.translate(x, y);\n  ctx.rotate(degreesToRadians(rotation));\n  ctx.drawImage(img, -width / 2, -height / 2, width, height);\n  ctx.rotate(-degreesToRadians(rotation));\n  ctx.translate(-x, -y);\n};\n\nconst degreesToRadians = (degrees) => (degrees * Math.PI) / 180;\nconst radiansToDegrees = (radians) => (radians * 180) / Math.PI;\n","import React, { useState, useEffect } from \"react\";\n\nimport Heart from \"svg/heart.svg\";\n\nimport ColorSliders from \"jsx/ColorSliders\";\nimport ParameterSliders from \"jsx/ParameterSliders\";\nimport ImageSelect from \"jsx/ImageSelect\";\n\nimport { loadImage, drawPattern } from \"js/draw\";\n\nconst App = () => {\n  const [img, setImg] = useState(null);\n  const [color, setColor] = useState({\n    hue: 0,\n    saturation: 80,\n    lightness: 70,\n  });\n  const [params, setParams] = useState({\n    canvas_width: 485,\n    canvas_height: 755,\n    shape_scale: 5,\n    x_gap: 2,\n    y_gap: 2,\n    coverage: 100,\n    random_x_offset: 0,\n    random_y_offset: 0,\n    rotation_lower: -40,\n    rotation_upper: 40,\n  });\n\n  useEffect(() => {\n    if (img) drawPattern(img, color, params);\n  }, [color, img, params]);\n\n  const loadImageToState = async (svg) => {\n    const loadedImage = await loadImage(svg);\n    setImg(loadedImage);\n  };\n\n  useEffect(() => {\n    loadImageToState(Heart);\n  }, []);\n\n  return (\n    <div className=\"app\">\n      <div className=\"interface\">\n        <h1>Pattern Generator</h1>\n        <div>\n          <h2>Shape</h2>\n          <ImageSelect {...{ loadImageToState }} />\n        </div>\n        <div>\n          <h2>Color</h2>\n          <ColorSliders {...{ color, setColor }} />\n        </div>\n        <div>\n          <h2>Parameters</h2>\n          <ParameterSliders {...{ params, setParams }} />\n        </div>\n      </div>\n      <canvas\n        id=\"myCanvas\"\n        className=\"canvas\"\n        width={params.canvas_width}\n        height={params.canvas_height}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"jsx/App.jsx\";\n\nimport \"css/mobile.css\";\nimport \"css/tablet.css\";\nimport \"css/desktop.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}